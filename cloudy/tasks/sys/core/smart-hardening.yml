# Smart Hardening Task - Attempts hardening if needed
# Can be included in generic-server.yml for one-command deployment
# Usage: include_tasks: tasks/sys/core/smart-hardening.yml

---
- name: Smart hardening attempt
  block:
    - name: Check if we're already connected as admin on custom port
      command: whoami
      register: current_user_check
      changed_when: false
      failed_when: false
      
    - name: Check if hardening is already complete
      include_tasks: verify-hardening-complete.yml
      when: current_user_check.stdout == admin_user | default('admin')
      
    - name: Set hardening skip flag if already complete
      set_fact:
        skip_hardening: true
        hardening_state: "already_complete"
      when: 
        - current_user_check.stdout == admin_user | default('admin')
        - hardening_verified | default(false)
        
    - name: Run hardening if needed
      block:
        # Basic system preparation
        - name: Update system packages for hardening
          include_tasks: ../core/update.yml
          tags: [system, update]
          
        - name: Install common utilities for hardening
          include_tasks: ../core/install-common.yml
          tags: [system, packages]
          
        # User Management - Create admin user
        - name: Create admin user for hardening
          include_tasks: ../user/add-user.yml
          vars:
            username: "{{ admin_user }}"
          tags: [users, admin]
          
        - name: Set admin user password for hardening
          include_tasks: ../user/change-password.yml
          vars:
            username: "{{ admin_user }}"
            password: "{{ admin_password }}"
          tags: [users, admin, password]
          
        - name: Add admin user to sudoers for hardening
          include_tasks: ../user/add-sudoer.yml
          vars:
            username: "{{ admin_user }}"
          tags: [users, admin, sudo]
          
        - name: Add admin user to groups for hardening
          include_tasks: ../user/add-to-groups.yml
          vars:
            username: "{{ admin_user }}"
            group_list: "{{ admin_groups | default('admin,www-data') }}"
          tags: [users, admin, groups]
          
        # SSH Key Installation
        - name: Install SSH public key for admin user
          include_tasks: ../ssh/install-public-key.yml
          vars:
            target_user: "{{ admin_user }}"
            pub_key_path: "{{ ansible_ssh_private_key_file }}.pub"
          when: ansible_ssh_private_key_file is defined
          tags: [ssh, keys, admin]
          
        # Firewall Setup
        - name: Install UFW firewall
          include_tasks: ../firewall/install.yml
          tags: [firewall, ssh, security]
          
        - name: Allow new SSH port in UFW firewall
          ufw:
            rule: allow
            port: "{{ ssh_port | default(22022) }}"
            proto: tcp
          when: (ssh_port | default(22022)) != 22
          tags: [firewall, ssh, security]
          
        # SSH Security Configuration
        - name: Configure SSH port
          include_tasks: ../ssh/set-port.yml
          tags: [ssh, security]
          
        # Final security lockdown
        - name: Disable root login
          include_tasks: ../ssh/disable-root-login.yml
          tags: [ssh, security]
          
        - name: Disable password authentication
          include_tasks: ../ssh/disable-password-auth.yml
          tags: [ssh, security]
          
        # Enable UFW firewall (final security step)
        - name: Enable UFW firewall
          ufw:
            state: enabled
            logging: 'on'
          tags: [firewall, security]
          
        - name: Display hardening completion
          debug:
            msg: |
              ✅ Smart hardening completed successfully!
              Server is now secured and ready for generic setup.
              
      when: not (skip_hardening | default(false))
      
    - name: Display hardening skip message
      debug:
        msg: |
          ✅ Hardening already complete - verified!
          Proceeding with generic server setup.
      when: skip_hardening | default(false)
      
  rescue:
    - name: Hardening failed - continue with generic setup
      debug:
        msg: |
          ⚠️  Smart hardening attempt failed, but continuing with generic setup.
          This may be expected if the server is already partially configured.
          
  always:
    - name: Reset connection for generic setup
      meta: clear_host_errors